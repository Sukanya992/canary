pipeline {
    agent any
    environment {
        ZONE = "us-central1-c"
        PROJECT_ID = "plated-epigram-452709-h6"
        CLUSTER_NAME = "cluster-2"
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-key')
        IMAGE_NAME = "canary-deploy"
        GREEN_DEPLOY = "k8s/green.yaml"
        BLUE_DEPLOY = "k8s/blue.yaml"
        SVC = "k8s/svc.yaml"
        VIRTUALSERVICE = "k8s/virtualservice.yaml"
        DESTINATIONRULE = "k8s/destinationrule.yaml"
    }

    stages {
        stage('GCP Login') {
            steps {
                withCredentials([file(credentialsId: 'gcp-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh '''
                    gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                    gcloud config set project $PROJECT_ID
                    '''
                }
            }
        }

        stage('Create GKE Cluster') {
            steps {
                script {
                    dir('terraform') {
                        sh '''
                        terraform init
                        terraform plan
                        terraform apply --auto-approve
                        '''
                    }
                }
            }
        }
 stage('Wait for Cluster Access') {
            steps {
                retry(3) {
                    sh '''
                    sleep 10
                    gcloud container clusters get-credentials $CLUSTER_NAME --zone $ZONE --project plated-epigram-452709-h6
                    '''
                }
            }
        }

stage('Check GKE Connectivity') {
    steps {
        sh '''
        # Verify connectivity to the Kubernetes cluster
        kubectl get nodes || { echo "Cannot connect to the GKE cluster"; exit 1; }
        '''
    }
}

   stage('Install Istio') {
            steps {
                script {
                    echo 'Downloading and Installing Istio...'
                    sh '''
                    # Download Istio
                    curl -L https://istio.io/downloadIstio | ISTIO_VERSION=${ISTIO_VERSION} sh -
                    cd ${ISTIO_PATH}

                    # Add Istio binary directory to PATH
                    export PATH=$PWD/bin:$PATH

                    # Check Kubernetes connectivity
                    echo "Checking Kubernetes cluster connectivity..."
                    kubectl get nodes || { echo "Cannot connect to the Kubernetes cluster"; exit 1; }

                    # Check Istio CLI version
                    echo "Checking Istio installation prerequisites..."
                    istioctl version --remote=false || { echo "Istioctl not working"; exit 1; }

                    # Install or Reinstall Istio with extended timeout for CNI
                    echo "Checking for existing Istio pods..."
                    if ! kubectl get pods -n istio-system 2>/dev/null | grep -q 'istiod'; then
                        echo "Installing or re-installing Istio with extended CNI timeout..."
                        istioctl install --set profile=demo --set components.cni.enabled=true --set cni.timeout=10m -y
                    else
                        echo "Istio is already installed"
                    fi

                    # Wait for Istio components to be installed
                    echo "Waiting for Istio components to be installed..."
                    kubectl wait --for=condition=ready pod -n istio-system --selector=app=istiod --timeout=10m || { echo "Istio control plane (istiod) failed to install"; exit 1; }
                    kubectl wait --for=condition=ready pod -n istio-system --selector=app=istio-ingressgateway --timeout=10m || { echo "Istio ingress gateway failed to install"; exit 1; }

                    # Ensure Istio CNI is installed and ready
                    kubectl get daemonset -n kube-system istio-cni-node || { echo "Istio CNI node daemonset not found"; exit 1; }
                    kubectl wait --for=condition=ready daemonset -n kube-system istio-cni-node --timeout=10m || { echo "Istio CNI failed to start"; exit 1; }
                    '''
                }
            }
        }
    }


        stage('Build Docker Images') {
            steps {
                script {
                    sh '''
                    # Build Blue and Green Docker images
                    docker build -t $IMAGE_NAME-old -f app/old/Dockerfile app/old
                    docker build -t $IMAGE_NAME-canary -f app/canary/Dockerfile app/canary
                    
                    # Tag with build number
                    docker tag $IMAGE_NAME-old sukanya996/$IMAGE_NAME:old-$BUILD_NUMBER
                    docker tag $IMAGE_NAME-canary sukanya996/$IMAGE_NAME:canary-$BUILD_NUMBER
                    '''
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    sh '''
                    # Push Docker images to Docker Hub
                    docker push sukanya996/$IMAGE_NAME:old-$BUILD_NUMBER
                    docker push sukanya996/$IMAGE_NAME:canary-$BUILD_NUMBER
                    '''
                }
            }
        }

        stage('Get GKE Credentials') {
            steps {
                script {
                    sh '''
                    gcloud container clusters get-credentials $CLUSTER_NAME --zone $ZONE --project $PROJECT_ID
                    '''
                }
            }
        }

        stage('Deploy Blue and Green Apps') {
            steps {
                script {
                    sh '''
                    kubectl apply -f $BLUE_DEPLOY
                    kubectl apply -f $GREEN_DEPLOY
                    kubectl apply -f $SVC
                    
                    # Wait for deployments to stabilize
                    sleep 30
                    kubectl get svc
                    '''
                }
            }
        }

        stage('Create Istio VirtualService') {
            steps {
                script {
                    sh '''
                    kubectl apply -f $VIRTUALSERVICE
                    '''
                }
            }
        }

        stage('Create Istio DestinationRule') {
            steps {
                script {
                    sh '''
                    kubectl apply -f $DESTINATIONRULE
                    '''
                }
            }
        }

        stage('Gradually Switch Traffic to Green (Canary)') {
            steps {
                script {
                    sh '''
                    kubectl patch virtualservice flask-service -p '{"spec": {"http": [{"route": [{"destination": {"host": "flask-service", "subset": "blue"}} ,{"destination": {"host": "flask-service", "subset": "green"}}]}]}}'
                    '''
                }
            }
        }

        stage('Cleanup Blue Deployment') {
            steps {
                script {
                    sh '''
                    kubectl delete -f $BLUE_DEPLOY || echo "No blue deployment found"
                    '''
                }
            }
        }

        stage('Final Check') {
            steps {
                script {
                    sh '''
                    kubectl get svc
                    '''
                }
            }
        }
    }
}

