pipeline {
    agent any
    environment {
        ZONE = "us-central1-c"
        PROJECT_ID = "your-project-id"
        CLUSTER_NAME = "canary-cluster"
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-key')
        IMAGE_NAME = "canary-deploy"
        GREEN_DEPLOY = "k8s/green.yaml"
        BLUE_DEPLOY = "k8s/blue.yaml"
        SVC = "k8s/svc.yaml"
        VIRTUALSERVICE = "k8s/virtualservice.yaml"
        DESTINATIONRULE = "k8s/destinationrule.yaml"
    }

    stages {
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub',
                                                  usernameVariable: 'DOCKER_USER',
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
                }
            }
        }

        stage('GCP Auth & Terraform Apply') {
            steps {
                withCredentials([file(credentialsId: 'gcp-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    dir('terraform') {
                        sh '''
                        gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                        terraform init
                        terraform apply -auto-approve
                        '''
                    }
                }
            }
        }

        stage('Get GKE Credentials') {
            steps {
                sh '''
                gcloud container clusters get-credentials $CLUSTER_NAME --zone $ZONE
                '''
            }
        }

        stage('Install Istio') {
            steps {
                sh '''
                curl -L https://istio.io/downloadIstio | sh -
                ISTIO_DIR=$(find . -maxdepth 1 -type d -name "istio-*")
                export PATH="$PATH:$ISTIO_DIR/bin"
                $ISTIO_DIR/bin/istioctl install --set profile=default -y
                '''
            }
        }

        stage('Build Docker Images') {
            steps {
                sh '''
                docker build -t $IMAGE_NAME-blue -f app/blue/Dockerfile app/blue
                docker tag $IMAGE_NAME-blue sukanya996/$IMAGE_NAME:blue-$BUILD_NUMBER
                docker build -t $IMAGE_NAME-green -f app/green/Dockerfile app/green
                docker tag $IMAGE_NAME-green sukanya996/$IMAGE_NAME:green-$BUILD_NUMBER
                '''
            }
        }

        stage('Push Docker Images') {
            steps {
                sh '''
                docker push sukanya996/$IMAGE_NAME:blue-$BUILD_NUMBER
                docker push sukanya996/$IMAGE_NAME:green-$BUILD_NUMBER
                '''
            }
        }

        stage('Update Deployment Files') {
            steps {
                sh '''
                sed -i "s|image: .*blue.*|image: sukanya996/${IMAGE_NAME}:blue-${BUILD_NUMBER}|" k8s/blue-deployment.yaml
                sed -i "s|image: .*green.*|image: sukanya996/${IMAGE_NAME}:green-${BUILD_NUMBER}|" k8s/green-deployment.yaml
                '''
            }
        }

        stage('Deploy Blue and Green Apps') {
            steps {
                sh '''
                kubectl apply -f k8s/blue-deployment.yaml
                kubectl apply -f k8s/green-deployment.yaml
                '''
            }
        }

        stage('Create Istio Resources') {
            steps {
                sh '''
                kubectl apply -f k8s/destination-rule.yaml
                kubectl apply -f k8s/virtual-service.yaml
                '''
            }
        }

        stage('Final Check') {
            steps {
                sh '''
                kubectl get pods
                kubectl get svc
                '''
            }
        }
    }
}
