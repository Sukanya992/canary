pipeline {
    agent any
    environment {
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-key') // Service Account JSON in Jenkins
        IMAGE_NAME = "canary-deploy"

        GREEN_DEPLOY = "k8s/canary.yaml"
        BLUE_DEPLOY  = "k8s/old.yaml"
        SVC          = "k8s/svc.yaml"
        VIRTUALSERVICE = "k8s/virtual.yaml"
        DESTINATIONRULE = "k8s/rule.yaml"
    }

    stages {
        stage('Authenticate & Terraform Apply') {
            steps {
                withCredentials([file(credentialsId: 'gcp-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    dir('terraform') {
                        sh '''
                        echo "Authenticating with GCP"
                        gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS

                        echo "Running Terraform"
                        terraform init
                        terraform apply -auto-approve

                        echo "Fetching outputs"
                        export PROJECT_ID=$(terraform output -raw project_id)
                        export CLUSTER_NAME=$(terraform output -raw cluster_name)
                        export ZONE=$(terraform output -raw zone)

                        echo "Fetching GKE Credentials"
                        gcloud config set project $PROJECT_ID
                        gcloud container clusters get-credentials $CLUSTER_NAME --zone $ZONE
                        kubectl get nodes

                        echo "$PROJECT_ID" > ../project_id.txt
                        echo "$CLUSTER_NAME" > ../cluster_name.txt
                        echo "$ZONE" > ../zone.txt
                        '''
                    }
                }
            }
        }
        stage('Install Istio') {
            steps {
                sh '''
                curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.21.0 sh -
                cd istio-1.21.0
                export PATH=$PWD/bin:$PATH
                istioctl install --set profile=default -y
                '''
            }
        }

        stage('Build Docker Images') {
            steps {
                sh '''
                docker build -t $IMAGE_NAME-blue -f app/blue/Dockerfile app/blue
                docker build -t $IMAGE_NAME-green -f app/green/Dockerfile app/green

                docker tag $IMAGE_NAME-blue sukanya996/$IMAGE_NAME:blue-$BUILD_NUMBER
                docker tag $IMAGE_NAME-green sukanya996/$IMAGE_NAME:green-$BUILD_NUMBER
                '''
            }
        }

        stage('Push Docker Images') {
            steps {
                sh '''
                docker push sukanya996/$IMAGE_NAME:blue-$BUILD_NUMBER
                docker push sukanya996/$IMAGE_NAME:green-$BUILD_NUMBER
                '''
            }
        }

        stage('Deploy Blue and Green Versions') {
            steps {
                sh '''
                kubectl apply -f $BLUE_DEPLOY
                kubectl apply -f $GREEN_DEPLOY
                kubectl apply -f $SVC
                sleep 20
                kubectl get svc
                '''
            }
        }

        stage('Apply Istio Routing') {
            steps {
                sh '''
                kubectl apply -f $DESTINATIONRULE
                kubectl apply -f $VIRTUALSERVICE
                '''
            }
        }

        stage('Canary Traffic Shifting') {
            steps {
                script {
                    def shifts = [90, 70, 50, 30, 10, 0]
                    for (int i = 0; i < shifts.size(); i++) {
                        def blue = shifts[i]
                        def green = 100 - blue
                        sh """
                        echo "Traffic shift: blue=${blue}%, green=${green}%"
                        sed -e 's/blue_weight:.*/blue_weight: ${blue}/' -e 's/green_weight:.*/green_weight: ${green}/' k8s/virtual-template.yaml > k8s/virtual.yaml
                        kubectl apply -f k8s/virtual.yaml
                        sleep 10
                        """
                    }
                }
            }
        }

        stage('Cleanup Blue') {
            steps {
                sh 'kubectl delete -f $BLUE_DEPLOY || echo "Already deleted."'
            }
        }

        stage('Final Verification') {
            steps {
                sh 'kubectl get all'
            }
        }
    }
}
